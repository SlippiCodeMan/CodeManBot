buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version "6.1.0"
    id 'com.palantir.docker' version '0.25.0'
    id 'com.palantir.docker-run' version '0.25.0'
    id "co.uzzu.dotenv.gradle" version "1.1.0"
}

group 'io.fluentcoding'
version '1.0-SNAPSHOT'

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    implementation ('net.dv8tion:JDA:4.1.1_167') {
        exclude module: 'opus-java'
    }
    implementation 'org.mongodb:mongo-java-driver:3.12.5'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation group: 'org.json', name: 'json', version: '20090211'
    implementation 'io.github.cdimascio:dotenv-java:2.2.0'
}

repositories {
    jcenter()
}

ext {
    javaMainClass = "io.fluentcoding.codemanbot.Application"
    execmode = env.fetch("CODEMAN_EXEC_MODE", "dev")
}

application {
    mainClassName = javaMainClass
}

jar {
    manifest {
        attributes 'Main-Class': javaMainClass
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

docker {
    name "${project.name}${execmode}:${project.version}"
    files "$buildDir/libs/${project.name}-${project.version}-all.jar", "$rootDir/.env"
    buildArgs([JAR_FILE: "${project.name}-${project.version}-all.jar"])
}
dockerRun {
    name "${project.name}${execmode}"
    image "${project.name}${execmode}:${project.version}"
    clean true
    daemonize true
}